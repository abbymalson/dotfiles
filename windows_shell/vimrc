"source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin

set backspace=2
set nocompatible
set modelines=10
set tabpagemax=100
set encoding=utf-8

" change the mapleader from | to ,
let mapleader=","

set ffs=unix

set diffexpr=MyDiff()
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      if empty(&shellxquote)
        let l:shxq_sav = ''
        set shellxquote&
      endif
      let cmd = '"' . $VIMRUNTIME . '\diff"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3
  if exists('l:shxq_sav')
    let &shellxquote=l:shxq_sav
  endif
endfunction

" Specify Extensions - Syntax Highlighting
" autocmd BufReadPost *.json.tpl set syntax=json
" set syntax=json

" Specify a directory for plugins
call plug#begin('~/vimfiles/plugged')

" Plugins to use
Plug 'tpope/vim-fugitive'
Plug 'pprovost/vim-ps1'
Plug 'chase/vim-ansible-yaml'
Plug 'stephpy/vim-yaml'
Plug 'hashivim/vim-hashicorp-tools'
Plug 'elzr/vim-json'
Plug 'google/vim-jsonnet'
Plug 'aserebryakov/vim-todo-lists'
Plug 'editorconfig/editorconfig-vim'
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/nerdcommenter'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'powerline/powerline'
Plug 'sjl/vitality.vim'
Plug 'vim-scripts/ChocolateLiquor'
Plug 'hashivim/vim-terraform'
Plug 'ConradIrwin/vim-bracketed-paste'
Plug 'git@github.com:ekalinin/Dockerfile.vim'
" Initialize the Plugin System
call plug#end()

if &t_Co >= 256
    "colorscheme vividchalk
    colorscheme ChocolateLiquor
    "colorscheme desert-warm-256
endif
set backupdir=$TEMP
set directory=$TEMP
set undodir=$TEMP

set tabstop=4
set softtabstop=0
set shiftwidth=4
set expandtab
set smarttab
"Whitespace
set wrap
"set tabstop=2 shiftwidth=2 softtabstop=2
set cursorline
set expandtab
set modeline
set autoindent
set smartindent
set nojoinspaces
set tabstop=2
set softtabstop=2
set shiftwidth=2
set laststatus=2
set number
set ruler

"Searching
set hlsearch
set ignorecase
set smartcase

"Formatting
set list
set listchars=tab:>>
" set listchars+=trail:Â·

"Miscellaneous
set autoread
set clipboard=unnamed
set mouse=a
set wildmenu
set wildmode=longest,list

" Tab usage
nnoremap <silent> <Leader>t :tabnew<CR>
nnoremap <silent> g{ :execute 'silent! tabmove ' . (tabpagenr()-2)<CR>
nnoremap <silent> g} :execute 'silent! tabmove ' . tabpagenr()<CR>

"Easier shortcut for previous tab
nnoremap gr gT

"Easier shortcut for previous tab
nnoremap gr gT

"Make Y yank act like D
nnoremap Y y$

" Set paste mode (no reformatting)
nnoremap ,v :set paste!<CR>

" Folding and unfolding
map ,f :set foldmethod=indent<cr>zM
map ,F :set foldmethod=manual<cr>zR


" statusline
set statusline=%{fugitive#statusline()}

" switch to upper/lower window quickly
map <C-J> <C-W>j
map <C-K> <C-W>k
" switch to upper/lower window quickly
map <C-L> <C-W>l
map <C-H> <C-W>h

" visual shifting (does not exit Visual mode)
vnoremap < <gv
vnoremap > >gv


"
" NERDTree configuration
"

" Increase window size to 35 columns
let NERDTreeWinSize=35

" Tlist uses right window
let Tlist_Use_Right_Window = 1

nmap <Leader>nt :NERDTreeTabsToggle<CR>
nmap <Leader>tt :TbarToggle<CR>


highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

set statusline=\ "
set statusline+=%1*%-25.80f%*\ " file name minimum 25, maxiumum 80 (right justified)
set statusline+=%2*
set statusline+=%h "help file flag
set statusline+=%r "read only flag
set statusline+=%m "modified flag
set statusline+=%w "preview flag
set statusline+=%*\ "
set statusline+=%3*[
set statusline+=%{strlen(&ft)?&ft:'none'} " filetype
set statusline+=]%*\ "
set statusline+=%4*%{fugitive#statusline()}%*\ " Fugitive
" set statusline+=%5*%{Rvm#statusline()}%*\ " RVM
" set statusline+=%6*%{SyntasticStatuslineFlag()}%* " Syntastic Syntax Checking
set statusline+=%= " right align
set statusline+=%8*%-14.(%l,%c%V%)\ %<%P%* " offset


let g:Powerline_symbols = 'fancy'
filetype plugin indent on
set guifont=Inconsolata\ for\ Powerline:h15
"let g:Powerline_symbols = 'fancy'
set encoding=utf-8
set t_Co=256
set fillchars+=stl:\ ,stlnc:\
" set term=xterm-256color
set termencoding=utf-8

" TODO
let g:VimTodoListsUndoneItem = '- [TODO]'
let g:VimTodoListsDoneItem = '- [DONE]'


